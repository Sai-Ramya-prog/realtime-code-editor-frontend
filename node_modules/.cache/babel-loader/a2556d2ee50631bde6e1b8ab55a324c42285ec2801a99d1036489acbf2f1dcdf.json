{"ast":null,"code":"// server/socketHandler.js\nconst rooms = new Map(); // Using Map instead of object for better performance\n\nmodule.exports = io => {\n  io.on('connection', socket => {\n    console.log('ðŸŸ¢ New socket connected:', socket.id);\n\n    // Join a room with username\n    socket.on('join-room', ({\n      roomId,\n      username\n    }) => {\n      socket.join(roomId);\n\n      // Initialize room if it doesn't exist\n      if (!rooms.has(roomId)) {\n        rooms.set(roomId, {\n          users: new Map(),\n          files: {}\n        });\n      }\n\n      // Add user to room\n      const room = rooms.get(roomId);\n      room.users.set(socket.id, {\n        username,\n        position: null,\n        activeFile: null\n      });\n\n      // Broadcast updated user list\n      io.to(roomId).emit('user-list', {\n        users: Array.from(room.users.values()),\n        files: room.files\n      });\n      console.log(`${username} joined room ${roomId}`);\n    });\n\n    // Handle code changes with cursor position\n    socket.on('code-change', ({\n      roomId,\n      filePath,\n      code,\n      position\n    }) => {\n      if (rooms.has(roomId)) {\n        const room = rooms.get(roomId);\n        const user = room.users.get(socket.id);\n        if (user) {\n          // Update user activity\n          user.position = position;\n          user.activeFile = filePath;\n\n          // Update room files\n          room.files[filePath] = code;\n\n          // Broadcast to others\n          socket.to(roomId).emit('receive-code', {\n            filePath,\n            code,\n            sender: socket.id,\n            position\n          });\n\n          // Broadcast user activity\n          io.to(roomId).emit('user-activity', {\n            userId: socket.id,\n            username: user.username,\n            position,\n            activeFile: filePath\n          });\n        }\n      }\n    });\n\n    // Handle cursor position updates\n    socket.on('cursor-position', ({\n      roomId,\n      filePath,\n      position\n    }) => {\n      if (rooms.has(roomId)) {\n        const user = rooms.get(roomId).users.get(socket.id);\n        if (user) {\n          user.position = position;\n          user.activeFile = filePath;\n          io.to(roomId).emit('user-activity', {\n            userId: socket.id,\n            username: user.username,\n            position,\n            activeFile: filePath\n          });\n        }\n      }\n    });\n\n    // Handle disconnection\n    socket.on('disconnect', () => {\n      rooms.forEach((room, roomId) => {\n        if (room.users.has(socket.id)) {\n          const username = room.users.get(socket.id).username;\n          room.users.delete(socket.id);\n          io.to(roomId).emit('user-left', {\n            socketId: socket.id,\n            username\n          });\n          console.log(`ðŸ”´ ${username} disconnected from ${roomId}`);\n        }\n      });\n    });\n  });\n};","map":{"version":3,"names":["rooms","Map","module","exports","io","on","socket","console","log","id","roomId","username","join","has","set","users","files","room","get","position","activeFile","to","emit","Array","from","values","filePath","code","user","sender","userId","forEach","delete","socketId"],"sources":["D:/realtime-code-editor/client/src/pages/EditorPage.js"],"sourcesContent":["// server/socketHandler.js\r\nconst rooms = new Map(); // Using Map instead of object for better performance\r\n\r\nmodule.exports = (io) => {\r\n  io.on('connection', (socket) => {\r\n    console.log('ðŸŸ¢ New socket connected:', socket.id);\r\n\r\n    // Join a room with username\r\n    socket.on('join-room', ({ roomId, username }) => {\r\n      socket.join(roomId);\r\n      \r\n      // Initialize room if it doesn't exist\r\n      if (!rooms.has(roomId)) {\r\n        rooms.set(roomId, {\r\n          users: new Map(),\r\n          files: {}\r\n        });\r\n      }\r\n      \r\n      // Add user to room\r\n      const room = rooms.get(roomId);\r\n      room.users.set(socket.id, {\r\n        username,\r\n        position: null,\r\n        activeFile: null\r\n      });\r\n      \r\n      // Broadcast updated user list\r\n      io.to(roomId).emit('user-list', {\r\n        users: Array.from(room.users.values()),\r\n        files: room.files\r\n      });\r\n      \r\n      console.log(`${username} joined room ${roomId}`);\r\n    });\r\n\r\n    // Handle code changes with cursor position\r\n    socket.on('code-change', ({ roomId, filePath, code, position }) => {\r\n      if (rooms.has(roomId)) {\r\n        const room = rooms.get(roomId);\r\n        const user = room.users.get(socket.id);\r\n        \r\n        if (user) {\r\n          // Update user activity\r\n          user.position = position;\r\n          user.activeFile = filePath;\r\n          \r\n          // Update room files\r\n          room.files[filePath] = code;\r\n          \r\n          // Broadcast to others\r\n          socket.to(roomId).emit('receive-code', {\r\n            filePath,\r\n            code,\r\n            sender: socket.id,\r\n            position\r\n          });\r\n          \r\n          // Broadcast user activity\r\n          io.to(roomId).emit('user-activity', {\r\n            userId: socket.id,\r\n            username: user.username,\r\n            position,\r\n            activeFile: filePath\r\n          });\r\n        }\r\n      }\r\n    });\r\n\r\n    // Handle cursor position updates\r\n    socket.on('cursor-position', ({ roomId, filePath, position }) => {\r\n      if (rooms.has(roomId)) {\r\n        const user = rooms.get(roomId).users.get(socket.id);\r\n        if (user) {\r\n          user.position = position;\r\n          user.activeFile = filePath;\r\n          io.to(roomId).emit('user-activity', {\r\n            userId: socket.id,\r\n            username: user.username,\r\n            position,\r\n            activeFile: filePath\r\n          });\r\n        }\r\n      }\r\n    });\r\n\r\n    // Handle disconnection\r\n    socket.on('disconnect', () => {\r\n      rooms.forEach((room, roomId) => {\r\n        if (room.users.has(socket.id)) {\r\n          const username = room.users.get(socket.id).username;\r\n          room.users.delete(socket.id);\r\n          io.to(roomId).emit('user-left', { socketId: socket.id, username });\r\n          console.log(`ðŸ”´ ${username} disconnected from ${roomId}`);\r\n        }\r\n      });\r\n    });\r\n  });\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}